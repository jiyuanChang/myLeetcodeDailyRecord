https://leetcode.cn/problems/design-linked-list/

//双向链表
public class ListNode {
    int val;
    ListNode pre;
    ListNode next;
    
    ListNode(int x) {
        val = x;
    }
}

class MyLinkedList {

    private ListNode head, tail;
    private int size;

    public MyLinkedList() {
        size = 0;
        head = new ListNode(0);
        tail = new ListNode(0);
        head.next = tail;
        tail.pre = head;
    }
    
    public int get(int index) {
        if (index < 0 || index >= size) {
            return -1;
        }
        ListNode curr = head;
        if (index + 1 < size - index) {
            for (int i = 0; i < index + 1; i++) {
                curr = curr.next;
            }
        } else {
            curr = tail;
            for (int i = 0; i < size - index; i++) {
                curr = curr.pre;
            }
        }
        return curr.val;
    }
    
    public void addAtHead(int val) {
        ListNode pred = head, succ = head.next;

        size++;
        ListNode newNode = new ListNode(val);
        newNode.next = succ;
        newNode.pre = pred;
        succ.pre = newNode;
        pred.next = newNode;
    }
    
    public void addAtTail(int val) {
        ListNode succ = tail, pred = tail.pre;

        size++;
        ListNode newNode = new ListNode(val);
        newNode.next = succ;
        newNode.pre = pred;
        succ.pre = newNode;
        pred.next = newNode;
    }
    
    public void addAtIndex(int index, int val) {
        if (index > size) {
            return;
        }
        if (index < 0) {
            index = 0;
        }

        ListNode pred, succ;
        if (index < size - index) {
            pred = head;
            for (int i = 0; i < index; i++) {
                pred = pred.next;
            }
            succ = pred.next;
        } else {
            succ = tail;
            for (int i = 0; i < size - index; i++) {
                succ = succ.pre;
            }
            pred = succ.pre;
        }

        ++size;
        ListNode newNode = new ListNode(val);
        newNode.next = succ;
        newNode.pre = pred;
        succ.pre = newNode;
        pred.next = newNode;
    }
    
    public void deleteAtIndex(int index) {
        if (index <0 || index >= size) {
            return;
        }

        ListNode pred, succ;
        if (index < size - index) {
            pred = head;
            for (int i = 0; i < index; i++) {
                pred = pred.next;
            }
            succ = pred.next.next;
        } else {
            succ = tail;
            for (int i = 0; i < size - index - 1; i++) {
                succ = succ.pre;
            }
            pred = succ.pre.pre;
        }

        size--;
        pred.next = succ;
        succ.pre = pred;
    }
}

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */
