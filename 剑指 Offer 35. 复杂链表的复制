/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) return null;

       //复制节点
       Node curr = head;
       while (curr != null)
       {
           Node newNode = new Node(curr.val);
           newNode.next = curr.next;
           curr.next = newNode;
           curr = curr.next.next;
       }
       Node newHead = head.next;
       //复制random节点
       curr = head;
       while (curr != null)
       {
           if (curr.random != null)
           {
               curr.next.random = curr.random.next;
           }
           curr = curr.next.next;
       }
       //拆分链表
       curr = head;
       Node copyHead = head.next;
       Node currCopy = head.next;

       while (curr != null)
       {
           curr.next = curr.next.next;
           curr = curr.next;
           if (currCopy.next != null)
           {
               currCopy.next = currCopy.next.next;
               currCopy = currCopy.next;
           }
       }

       return copyHead;
    }
}
